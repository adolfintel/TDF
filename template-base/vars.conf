### List of all TDF settings
#For more info about possible values and details about how they work, see README.md here: https://github.com/adolfintel/TDF/blob/master/README.md#configuration-variables

#        [VARIABLES - Basic configuration]
game_exe=''
#game_args=''
#game_workingDir=''

#        [VARIABLES - Wine]
#TDF_WINE_PREFERRED_VERSION="games"              #games=Game-optimized build. | mainline=Regular Wine. | custom=The build in the wine-custom folder outside the system folder. | system=The Wine version installed on the system or mainline if not installed. Any other value will use system/wine-yourValue or system Wine if not found.
#export WINEDLLOVERRIDES=''                      #list of DLL/exe files to be loaded in this format: filename=n,b;filename2=n,b  (where n means prefer "native" windows file, and b means prefer builtin (the version provided by wine); d is also an option if you want to disable loading of a certain DLL/exe)
#export WINEDEBUG=-all
#export WINE_LARGE_ADDRESS_AWARE=1               #Set to 1 to enable large address aware (>2GB RAM for 32-bit apps)
#export WINE_HEAP_DELAY_FREE=0                   #Set to 1 to workaround some crashes caused by bad memory management in some old games and applications.
#TDF_WINE_MAXLOGICALCPUS=0                       #The maximum number of logical CPUs (also known as hardware threads, the ones you see in task manager) that the application can use. If the number of logical CPUs in the machine exceeds this, TDF will limit how many can be used by the application assigning them "intelligently" to maximize gaming performance. Set to 0 to disable limit. Only supported by games build, other versions will ignore this parameter.
#TDF_WINE_NOSMT=0                                #1=Doesn't show hyperthreading/SMT to the application (if present on the system). Only supported by games build, other versions will ignore this parameter.
#TDF_WINE_NOECORES=0                             #1=Doesn't show e-cores to the application. Only supported by games build, other versions will ignore this parameter.
#TDF_WINE_PREFER_SAMESOCKET=1                    #0=Assigns cores exclusively on speed. | 1=Assigns cores based on speed, but first use all the cores on the first CPUs then use the others. | 2=Shows only the first CPU to the application and ignores the others. This can be useful if you're gaming on a multi-CPU server or something similar. Only supported by games build, other versions will ignore this parameter.
#TDF_START_ARGS=''                               #Additional arguments to pass to Wine's start command, such as /affinity 1.
#TDF_WINE_ARCH="win64"                           #win64=Emulates 64-bit Windows. | win32=Emulates 32-bit Windows (useful for older games). WARNING: cannot be changed after wineprefix initialization.
#TDF_WINE_WINVER=""                              #Sets the Windows version to emulate. By default it lets Wine decide (or the user through winecfg). Sensible values: win10, win11, win7, win8, win81, vista, winxp, winxp64. Other values: win2003, win2008, win2008r2, winme, win2k, win98, win95, nt40, nt351, win31, win30, win20. If using an older Windows version, TDF_WINE_ARCH should also be set accordingly
#TDF_WINE_THEME=""                                #Sets the theme to use in wine. By default it lets Wine decide (or the user through winecfg). Possible values: classic, light
#TDF_WINE_AUDIO_DRIVER="default"                 #alsa | jack | pulse | default (lets Wine decide).
#TDF_WINE_DEBUG_GSTREAMER=0                      #1=Enables GStreamer debug output on the terminal (for debugging video problems).
#TDF_WINE_DEBUG_RELAY=0                          #1=Intercepts all system calls and dump them to a file (for debugging purposes).
#TDF_WINE_DPI=-1                                 #-1=Uses system DPI. | 0=Let Wine decide | number=Uses specified DPI.
#TDF_WINE_GRAPHICS_DRIVER="default"              #wayland | x11 | default (lets Wine decide).
#TDF_WINE_HIDE_CRASHES=1                         #1=Hides the "stopped working" window if the game crashes. [Recommended]
#TDF_WINE_KILL_AFTER=0                           #1=Explicitly kills the Wine processes when the game ends. [Not recommended]
#TDF_WINE_KILL_BEFORE=0                          #1=Explicitly kills the Wine processes before launching the game. [Not recommended]
#TDF_WINE_LANGUAGE=''                            #Language for Wine applications. By default it is set to your $LANG. You can force any locale in the standard format, such as 'en_US.UTF-8'.
#TDF_WINE_SYNC="fsync"                           #fsync=Uses fsync if futex2 is available, otherwise esync. | esync=Always uses esync. | default=Lets wine decide. Only supported by games build, other versions will ignore this parameter.
#TDF_WINE_SMOKETEST=1                            #1=Makes sure that Wine actually works before trying to launch the game, set to 0 for faster loading.
#TDF_WINEGECKO=0                                 #1=Enables Wine gecko for applications that need Internet Explorer (not usually needed for games).
#TDF_WINEMONO=0                                  #1=Enables Wine mono for .NET applications (not usually needed for games).
#export WINE_CPU_TOPOLOGY=...                    #manually sets CPU topology [Not recommended, overrides TDF_WINE_MAXLOGICALCPUS, TDF_WINE_NOSMT, TDF_WINE_NOECORES, TDF_WINE_PREFER_SAMESOCKET]
#See here for additional wine settings: https://www.winehq.org/docs/en/wineusr-guide.html

#        [VARIABLES - DXVK (DirectX 8 to 11 emulation)]
#TDF_DXVK=1
#TDF_DXVK_ASYNC=2                                #0=Always use regular DXVK. | 1=Always use async version. | 2=Use regular DXVK if the GPU supports gpl, async if it doesn't.
#TDF_DXVK_NVAPI=0                                #Set to 1 to enable nvapi (Nvidia GPUs only).
#For additional settings to add in a dxvk.conf file next to the game's exe file, see here: https://github.com/doitsujin/dxvk/blob/master/dxvk.conf

#        [VARIABLES - VKD3D (DirectX 12 emulation)]
#TDF_VKD3D=1
#For additional settings, see here: https://github.com/HansKristian-Work/vkd3d-proton/blob/master/README.md#environment-variables

#        [VARIABLES - Sandboxing]
#TDF_BLOCK_NETWORK=1                             #0=Allows network access. | 1=Blocks with unshare -nc. [Recommended] | 2=Blocks with firejail if available, unshare -nc if it's not.
#TDF_BLOCK_BROWSER=1                             #0=Wine applications can launch the native browser. | 1=Blocks browser access. [Recommended]
#TDF_BLOCK_EXTERNAL_DRIVES=1                     #1=Wine applications can't access external drives, for example CD and USB drives (after installation). [Recommended]
#TDF_BLOCK_SYMLINKS_IN_CDRIVE=1                  #1=Removes symlinks from the virtual C drive (makes it harder to "escape" the sandbox).
#TDF_BLOCK_ZDRIVE=1                              #1=Wine applications can't access the Linux file system (after installation).
#TDF_FAKE_HOMEDIR=0                              #Creates a zzhome folder to be used as a temporary home, useful if the game needs a custom .driconf or similar tweaks.
#TDF_PROTECT_DOSDEVICES=0                        #Prevents Wine from modifying drive mappings. Not necessary when using the games and mainline builds. Can cause hangs when enabled.

#        [VARIABLES - Gamescope]
#TDF_GAMESCOPE=0                                 #1=Runs the game through Gamescope (if installed on the system).
#TDF_GAMESCOPE_PARAMETERS=''                     #If not changed in config, this will become -f -r 60 -w $XRES -h $YRES -- where $XRES and $YRES are the resolution of the main display.

#        [VARIABLES - Miscellaneous]
#export SteamGameId=...                          #Steam Appplication ID for this game (activates some game-specific fixes in the games build).
#export DRI_PRIME=...                            #Select which GPU to use (0=First GPU, 1=Second GPU etc.).
#TDF_COREFONTS=1                                 #1=Installs basic Windows fonts such as Arial.
#TDF_GAMEMODE=1                                  #1=Uses feral gamemode (if installed on the system).
#TDF_MANGOHUD=0                                  #1=Shows an MSI Afterburner-style performance overlay (if installed on the system).
#TDF_VCREDIST=1                                  #Installs Microsoft Visual Studio runtime (2015+).

#        [VARIABLES - TDF UI]
#TDF_TITLE=''                                    #Title for the TDF UI ("Launcher" is displayed by default).
#TDF_UI_LANGUAGE=''                              #Language for the TDF UI (currently available options: 'en', 'it').
#TDF_DETAILED_PROGRESS=0                         #1=Shows detailed info (for example: "Installing DXVK"). | 0=Shows only a "Launching..." message.
#TDF_HIDE_GAME_RUNNING_DIALOG=0                  #1=Hide the dialog that says "Game running" while the application is running | 0=Show the dialog
#TDF_IGNORE_EXIST_CHECKS=0                       #1=Skips the check that game_exe actually exists before launching the game.
#TDF_MULTIPLE_INSTANCES="askcmd"                 #deny=Exits without error messages. | error=Shows an error message and closes. | askcmd=Asks the user if it wants to run cmd inside the running prefix. | cmd=Runs command prompt inside the running prefix. | allow=Allows multiple instances of the game | kill=Kills previous instance of the game | askkill=Asks the user if they want to kill the running instance and restart it.
#TDF_SHOW_PLAY_TIME=0                            #1=Shows how long you've been playing when you close the game.
#TDF_DND=1                                       #1=Enable Do Not Disturb mode while the game is running (on supported DEs). Works with most games unless they launch a separate process and terminate immediately

#        [CALLBACKS]
#customChecks() {
#   Code to be executed immediately after the configuration is loaded.
#}

#onGameStart() {
#   Code to be executed right before the game is launched.
#}

#onGameEnd() {
#   Code to be executed right after the game is closed.
#}

#whileGameRunning() {
#   Code to be executed while the game is running. Runs in a separate subshell, use isProcessRunning "game.exe" to know if the process is still running.
#}

#onArchiveStart() {
#   Code to be executed when using ./run.sh archive.
#}

#onArchiveEnd() {
#   Code to be executed after archiving is done.
#}
